[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "iso-week-date"
version = "1.6.0"
description = "Toolkit to work with str representing ISO Week date format"

license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
authors = [{name = "Francesco Bruzzesi"}]

classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    # "Development Status :: 5 - Production/Stable",
]

[project.urls]
repository = "https://github.com/fbruzzesi/iso-week-date"
issue-tracker = "https://github.com/fbruzzesi/iso-week-date/issues"
documentation = "https://fbruzzesi.github.io/iso-week-date/"

[project.optional-dependencies]
pandas = [
    "pandas>=1.0.0",
]

polars = [
    "polars>=0.18.0",
]

pydantic = [
    "pydantic>=2.4.0",
]

dev = [
    "pre-commit==2.21.0",
    "hatch"
]

lint = [
    "ruff>=0.4.0"
]

docs = [
    "mkdocs>=1.4.2",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-autorefs",
]

test = [
    "interrogate>=1.5.0",
    "pytest==7.2.0",
    "pytest-xdist==3.2.1",
    "coverage==7.2.1",
]

types = [
    "mypy",
    "pandas-stubs",
    "typing-extensions>=4.4.0; python_version < '3.11'",
]

all = ["iso-week-date[pandas,polars,pydantic]"]
all-dev = ["iso-week-date[pandas,polars,pydantic,dev,lint,test,docs,types]"]

[tool.hatch.build.targets.sdist]
only-include = ["iso_week_date"]

[tool.hatch.build.targets.wheel]
packages = ["iso_week_date"]


[tool.ruff]
line-length = 120
target-version = "py38"
fix = true

[tool.ruff.lint]
preview = true
explicit-preview-rules = true

select = ["ALL"]
ignore = [
    "D100",  # Checks for undocumented public module definitions.
    "D104",  # Checks for undocumented public package definitions.
    "D107",  # Checks for public __init__ method definitions that are missing docstrings.
    "RET505",  # Checks for else statements with a return statement in the preceding if block.
    "DTZ",
    "COM812",
]

extend-safe-fixes = [
  "C419",    # unnecessary-comprehension-in-call
  "C420",    # unnecessary-dict-comprehension-for-iterable
  "PLR6201", # literal-membership
  "TC",      # flake8-type-checking
  "UP",      # pyupgrade
]
extend-select = [
  "PLR6201", # literal-membership
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN", "D", "S101", "PT006", "PT007", "FBT001", "SLF001"]

[tool.ruff.lint.isort]
force-single-line = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
docstring-code-format = true

[tool.interrogate]
ignore-nested-functions = true
ignore-module = true
ignore-init-method = true
ignore-private = true
ignore-magic = true
ignore-property-decorators = true
ignore-overloaded-functions = true
fail-under = 95
verbose = 2 # 0 (minimal output), 1 (-v), 2 (-vv)

[tool.mypy]
# ignore_missing_imports = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true
pretty = true
strict = true

[tool.pytest.ini_options]
env = [
  "PYTHONHASHSEED=42",
]

[tool.coverage.run]
source = ["iso_week_date/"]
